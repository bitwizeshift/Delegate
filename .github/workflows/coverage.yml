name: "Code Coverage"

on:
  push:
    paths:
      - 'include/**.hpp'
      - 'test/**.cpp'
      - '**.cmake'
      - '.gitmodules'
      - 'CMakeLists.txt'
      - 'test/CMakeLists.txt'
      - '.github/workflows/coverage.yml'
  pull_request:
    paths:
      - 'include/**.hpp'
      - 'test/**.cpp'
      - '**.cmake'
      - '.gitmodules'
      - 'CMakeLists.txt'
      - 'test/CMakeLists.txt'
      - '.github/workflows/coverage.yml'

jobs:
  coverage:
    name: Ubuntu ${{matrix.compiler.cc}} Coverage
    runs-on: ubuntu-20.04

    env:
      build-directory: build

    strategy:
      matrix:
        compiler:
          - { cc: clang, cxx: clang++, version: "10" }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Prepare Environment
        run: |
          sudo apt-get install -y ninja-build ${{matrix.compiler.cxx}}-${{matrix.compiler.version}}
          if [["${{matrix.compiler.cc}}" = "clang"]]; then
            sudo apt-get install -y llvm-${{matrix.compiler.version}}
          fi
          sudo apt-get install lcov
          cmake -E make_directory ${{env.build-directory}}

      - name: Configure
        working-directory: ${{env.build-directory}}
        env:
          CC: ${{matrix.compiler.cc}}-${{matrix.compiler.version}}
          CXX: ${{matrix.compiler.cxx}}-${{matrix.compiler.version}}
        run: |
          cmake ..                                                            \
            -GNinja                                                           \
            -DCMAKE_BUILD_TYPE=Debug                                          \
            -DDELEGATE_COMPILE_UNIT_TESTS=On                                  \
            -DCMAKE_CXX_FLAGS="--coverage"                                    \

      - name: Build
        working-directory: ${{env.build-directory}}
        run: cmake --build .

      - name: Test
        working-directory: ${{env.build-directory}}
        run: ctest --output-on-failure

      - name: Process Coverage Data
        working-directory: ${{env.build-directory}}
        run: |
          # Create a script for which gcov to use (needed for lcov)
          echo "#!/bin/bash" > gcov-executable.sh
          if [[ "${{matrix.compiler.cc}}" =~ "gcc" ]]; then
            echo 'gcov $@' >> gcov-executable.sh
          else
            echo 'llvm-cov-${{matrix.compiler.version}} gcov $@' >> gcov-executable.sh
          fi
          chmod +x gcov-executable.sh
          ./gcov-executable.sh $(find $(pwd) -name '*.o' -type f)

          # Generate coverage information
          lcov --capture                                                      \
            --gcov-tool $(pwd)/gcov-executable.sh                             \
            --directory .                                                     \
            --output-file coverage_unfiltered.info

          # Strip symbols from 'test' directory
          lcov --remove coverage_unfiltered.info -o coverage.info             \
            --gcov-tool $(pwd)/gcov-executable.sh                             \
            "/usr/*"                                                          \
            "$(pwd)/*"                                                        \
            "*/test/*"                                                        \
            "*/third_party/*"

      - name: Generate Coverage
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          path-to-lcov: ${{env.build-directory}}/coverage.info
